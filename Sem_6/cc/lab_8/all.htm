<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ChatConnect Pro</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4f46e5;
      --primary-hover: #4338ca;
      --light-bg: #f9fafb;
      --border: #e5e7eb;
      --text: #374151;
      --text-light: #6b7280;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--light-bg);
      color: var(--text);
      line-height: 1.6;
    }
    
    .container {
      max-width: 900px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
    
    .app-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1.5rem;
    }
    
    .app-title {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: var(--primary);
    }
    
    .logo {
      font-size: 1.8rem;
    }
    
    .room-badge {
      display: inline-flex;
      align-items: center;
      background-color: #e0e7ff;
      color: var(--primary);
      padding: 0.4rem 0.8rem;
      border-radius: 9999px;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .room-badge i {
      margin-right: 0.5rem;
    }
    
    .join-section {
      background-color: white;
      border-radius: 0.5rem;
      padding: 1.5rem;
      box-shadow: var(--shadow);
      margin-bottom: 1.5rem;
    }
    
    .join-form {
      display: flex;
      gap: 0.75rem;
    }
    
    .input-group {
      flex: 1;
      position: relative;
    }
    
    .input-group i {
      position: absolute;
      left: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-light);
    }
    
    input, button {
      width: 100%;
      padding: 0.75rem 1rem;
      border-radius: 0.375rem;
      border: 1px solid var(--border);
      font-size: 1rem;
      outline: none;
      transition: all 0.2s ease;
    }
    
    input {
      padding-left: 2.5rem;
    }
    
    input:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
    }
    
    button {
      background-color: var(--primary);
      color: white;
      border: none;
      font-weight: 500;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    button:hover {
      background-color: var(--primary-hover);
    }
    
    .btn-join {
      flex: 0 0 auto;
      width: auto;
    }
    
    .chat-section {
      background-color: white;
      border-radius: 0.5rem;
      box-shadow: var(--shadow);
      overflow: hidden;
      display: flex;
      flex-direction: column;
      height: 70vh;
    }
    
    .chat-header {
      padding: 1rem 1.5rem;
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .chat-header h3 {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .online-indicator {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #10b981;
      font-size: 0.875rem;
    }
    
    .pulse {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: #10b981;
      position: relative;
    }
    
    .pulse::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background-color: #10b981;
      opacity: 0.4;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% {
        transform: scale(1);
        opacity: 0.4;
      }
      50% {
        transform: scale(2);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 0;
      }
    }
    
    .chat-box {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem;
    }
    
    .message {
      display: flex;
      margin-bottom: 1.5rem;
      position: relative;
    }
    
    .message-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #e5e7eb;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: var(--text);
      margin-right: 1rem;
      flex-shrink: 0;
    }
    
    .message-content {
      flex: 1;
      padding: 0.75rem 1rem;
      background-color: #f3f4f6;
      border-radius: 0.5rem;
      position: relative;
      max-width: 70%;
    }
    
    .message-content::before {
      content: '';
      position: absolute;
      left: -8px;
      top: 12px;
      width: 0;
      height: 0;
      border-top: 8px solid transparent;
      border-bottom: 8px solid transparent;
      border-right: 8px solid #f3f4f6;
    }
    
    .message-sender {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }
    
    .message-time {
      position: absolute;
      right: 0;
      top: 0;
      font-size: 0.75rem;
      color: var(--text-light);
    }
    
    .my-message {
      flex-direction: row-reverse;
    }
    
    .my-message .message-avatar {
      margin-left: 1rem;
      margin-right: 0;
      background-color: var(--primary);
      color: white;
    }
    
    .my-message .message-content {
      background-color: #e0e7ff;
    }
    
    .my-message .message-content::before {
      left: auto;
      right: -8px;
      border-right: none;
      border-left: 8px solid #e0e7ff;
    }
    
    .my-message .message-time {
      left: 0;
      right: auto;
    }
    
    .chat-input {
      border-top: 1px solid var(--border);
      padding: 1rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .chat-input input {
      flex: 1;
    }
    
    .btn-send {
      width: auto;
    }
    
    .emoji-btn {
      background: none;
      border: none;
      color: var(--text-light);
      font-size: 1.25rem;
      cursor: pointer;
      padding: 0.5rem;
      width: auto;
    }
    
    .emoji-btn:hover {
      color: var(--primary);
      background: none;
    }
    
    .typing-indicator {
      display: none;
      padding: 0.5rem 1rem;
      color: var(--text-light);
      font-style: italic;
      font-size: 0.875rem;
    }
    
    .typing-dots {
      display: inline-flex;
    }
    
    .typing-dot {
      width: 4px;
      height: 4px;
      border-radius: 50%;
      background-color: var(--text-light);
      margin: 0 1px;
      animation: typingAnimation 1.5s infinite ease-in-out;
    }
    
    .typing-dot:nth-child(2) {
      animation-delay: 0.2s;
    }
    
    .typing-dot:nth-child(3) {
      animation-delay: 0.4s;
    }
    
    @keyframes typingAnimation {
      0%, 60%, 100% {
        transform: translateY(0);
      }
      30% {
        transform: translateY(-4px);
      }
    }
    
    /* Responsive styles */
    @media (max-width: 600px) {
      .join-form {
        flex-direction: column;
      }
      
      .message-content {
        max-width: 85%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header class="app-header">
      <div class="app-title">
        <i class="fas fa-comments logo"></i>
        <h1>ChatConnect Pro</h1>
      </div>
      <div class="room-badge" id="room-indicator" style="display: none;">
        <i class="fas fa-door-open"></i>
        <span id="room-label">None</span>
      </div>
    </header>
    
    <section class="join-section" id="join-section">
      <h2>Join a Chat Room</h2>
      <p class="text-light" style="margin-bottom: 1rem;">Enter a room ID to start messaging</p>
      <div class="join-form">
        <div class="input-group">
          <i class="fas fa-hashtag"></i>
          <input type="text" id="room-id" placeholder="Enter Room ID" autocomplete="off">
        </div>
        <button class="btn-join" onclick="joinRoom()">
          <i class="fas fa-sign-in-alt"></i>
          Join
        </button>
      </div>
    </section>
    
    <section class="chat-section" id="chat-section" style="display: none;">
      <div class="chat-header">
        <h3>
          <i class="fas fa-comments"></i>
          Room: <span id="header-room-id"></span>
        </h3>
        <div class="online-indicator">
          <div class="pulse"></div>
          <span>Connected</span>
        </div>
      </div>
      
      <div class="chat-box" id="chat-box"></div>
      
      <div class="typing-indicator" id="typing-indicator">
        <span class="typing-user">Someone</span> is typing
        <div class="typing-dots">
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        </div>
      </div>
      
      <div class="chat-input">
        <div class="input-group">
          <i class="fas fa-user"></i>
          <input type="text" id="sender" placeholder="Your name">
        </div>
        <div class="input-group" style="flex: 2;">
          <i class="fas fa-comment"></i>
          <input type="text" id="message" placeholder="Type a message..." onkeypress="handleKeyPress(event)">
        </div>
        <button class="emoji-btn" onclick="toggleEmojiPicker()" title="Add emoji">
          <i class="far fa-smile"></i>
        </button>
        <button class="btn-send" onclick="sendMessage()">
          <i class="fas fa-paper-plane"></i>
          Send
        </button>
      </div>
    </section>
  </div>

  <script>
    const insertUrl = "https://g7cnmc9bpf.execute-api.ap-south-1.amazonaws.com/InsertChatMessage";
    const baseGetUrl = "https://g7cnmc9bpf.execute-api.ap-south-1.amazonaws.com/GetChatMessages?RoomId=";
    let currentRoomId = null;
    let pollInterval = null;
    let lastMessageCount = 0;
    let currentUser = "";
    
    // Generate a random color for user avatars
    function stringToColor(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
      }
      const colors = [
        '#4f46e5', '#10b981', '#f59e0b', '#ef4444', 
        '#8b5cf6', '#ec4899', '#06b6d4', '#f97316'
      ];
      return colors[Math.abs(hash) % colors.length];
    }
    
    // Get initials from name
    function getInitials(name) {
      return name.split(' ')
        .map(word => word.charAt(0))
        .join('')
        .toUpperCase()
        .substring(0, 2);
    }
    
    // Format timestamp
    function formatTimestamp() {
      const now = new Date();
      return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    function joinRoom() {
      const roomInput = document.getElementById("room-id").value.trim();
      if (!roomInput) {
        alert("Please enter a Room ID to join.");
        return;
      }

      currentRoomId = roomInput;
      document.getElementById("room-label").innerText = currentRoomId;
      document.getElementById("header-room-id").innerText = currentRoomId;
      document.getElementById("room-indicator").style.display = "inline-flex";
      document.getElementById("chat-section").style.display = "flex";
      document.getElementById("join-section").style.display = "none";

      if (pollInterval) clearInterval(pollInterval);
      loadMessages();
      pollInterval = setInterval(loadMessages, 2000);
      
      // Save room and sender in localStorage
      if (localStorage.getItem("chatSender")) {
        document.getElementById("sender").value = localStorage.getItem("chatSender");
      }
      localStorage.setItem("chatRoom", currentRoomId);
      
      // Focus message input
      setTimeout(() => {
        document.getElementById("message").focus();
      }, 300);
    }
    
    function leaveRoom() {
      if (pollInterval) clearInterval(pollInterval);
      currentRoomId = null;
      lastMessageCount = 0;
      document.getElementById("room-indicator").style.display = "none";
      document.getElementById("chat-section").style.display = "none";
      document.getElementById("join-section").style.display = "block";
      document.getElementById("chat-box").innerHTML = "";
    }

    function sendMessage() {
      const sender = document.getElementById("sender").value.trim();
      const message = document.getElementById("message").value.trim();

      if (!sender) {
        alert("Please enter your name.");
        document.getElementById("sender").focus();
        return;
      }
      
      if (!message) {
        document.getElementById("message").focus();
        return;
      }
      
      if (!currentRoomId) {
        alert("Please join a room first.");
        return;
      }
      
      currentUser = sender;
      localStorage.setItem("chatSender", sender);

      // Show sending indicator immediately
      const tempId = 'msg-' + Date.now();
      addMessageToUI({
        Sender: sender,
        Message: message,
        tempId: tempId,
        sending: true
      });

      fetch(insertUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ RoomId: currentRoomId, Sender: sender, Message: message })
      })
      .then(response => response.json())
      .then(data => {
        console.log("Message sent:", data);
        document.getElementById("message").value = "";
        // Replace the temporary message indicator
        const tempMsg = document.getElementById(tempId);
        if (tempMsg) {
          tempMsg.querySelector('.message-content').classList.remove('sending');
        }
        loadMessages();
      })
      .catch(err => {
        console.error("Send error:", err);
        // Show error state
        const tempMsg = document.getElementById(tempId);
        if (tempMsg) {
          tempMsg.querySelector('.message-content').classList.add('error');
        }
      });
    }
    
    function addMessageToUI(msg) {
      const chatBox = document.getElementById("chat-box");
      const isMyMessage = msg.Sender === currentUser;
      const initials = getInitials(msg.Sender);
      const avatarColor = stringToColor(msg.Sender);
      
      const messageElement = document.createElement('div');
      messageElement.className = `message ${isMyMessage ? 'my-message' : ''}`;
      if (msg.tempId) {
        messageElement.id = msg.tempId;
      }
      
      messageElement.innerHTML = `
        <div class="message-avatar" style="background-color: ${avatarColor}">
          ${initials}
        </div>
        <div class="message-content ${msg.sending ? 'sending' : ''}">
          <div class="message-sender">${msg.Sender}</div>
          <div class="message-text">${msg.Message}</div>
          <div class="message-time">${formatTimestamp()}</div>
        </div>
      `;
      
      chatBox.appendChild(messageElement);
      chatBox.scrollTop = chatBox.scrollHeight;
    }

    function loadMessages() {
      if (!currentRoomId) return;

      fetch(baseGetUrl + encodeURIComponent(currentRoomId))
        .then(response => response.json())
        .then(messages => {
          if (messages.length === lastMessageCount) {
            return; // No new messages
          }
          
          const chatBox = document.getElementById("chat-box");
          chatBox.innerHTML = "";
          
          messages.forEach(msg => {
            addMessageToUI(msg);
          });
          
          // If there are new messages and not the first load
          if (lastMessageCount > 0 && messages.length > lastMessageCount) {
            playNotificationSound();
          }
          
          lastMessageCount = messages.length;
        })
        .catch(err => console.error("Load error:", err));
    }
    
    function handleKeyPress(event) {
      if (event.key === 'Enter') {
        sendMessage();
      }
    }
    
    function toggleEmojiPicker() {
      alert("Emoji picker feature coming soon!");
    }
    
    function playNotificationSound() {
      // Create audio element for notification sound
      const audio = new Audio("data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZEGBAhICYQKlAuCC04LBAuyCoQJMgjcBmsF9gOBAkMBCADk/uD9EP1s/Nz7hPuF+8f7QPzh/H39UP5j/4gAsAHMAtwD2ASrBVEG4QZSB4wHrgfPB+sHFwgwCEEIDwjaB1QH3gaJBt4FeQhlBk4E/QJ5A08Dbfy6/dAAdwLFAE8FuwFD/BEC0A5IBcT91PeZ/pn6yQB//nX34gI3Byv75fZ+ANgCFPpN+mcCiQPcAA//Xfzd/IH9Afu/+my5hrrmwxbHeM3D0W7XWd3J5AbrG/BB9Bf4wfqv/+0Eewm5Dv0RnhS2FjwYERmdGTwachpQGvIZShl9GJAXkxa9FZEUNBN9EXoPiw0MC6gI8wZnBQwEFgNLAvcBxwDM/wsAWgEYA/IFNgaECyAIswLQBWkN8QrMCQ==");
      audio.play();
    }
    
    // Check for saved room and user
    window.onload = function() {
      const savedRoom = localStorage.getItem("chatRoom");
      const savedSender = localStorage.getItem("chatSender");
      
      if (savedSender) {
        document.getElementById("sender").value = savedSender;
        currentUser = savedSender;
      }
      
      if (savedRoom) {
        document.getElementById("room-id").value = savedRoom;
        // Auto-join if there's a saved room (optional)
        // joinRoom();
      }
    };
  </script>
</body>
</html>